やるべきことは大きく分けて「**DB設計**」と「**API連携設計**」の2つです。

---

### **DB設計書の作成 🗃️**

これは、アプリケーションで扱う**データをどのように整理して保存するか**を決める設計です。

#### **ステップ1: 必要な「情報の種類（エンティティ）」を洗い出す**

まず、あなたのサービスに必要な情報の「主役」たちをすべてリストアップします。

* **ユーザー (Users):** アプリに登録する人。メールアドレス、パスワード、プラン（無料/有料）などの情報を持ちます。
* **記事 (Articles):** AIが生成する記事。タイトル、本文、作成日、どのユーザーが作ったか、どのジャンルに属するか、などの情報を持ちます。
* **ジャンル (Genres):** ユーザーが選択する記事のカテゴリ。「テクノロジー」「健康」「金融」など。
* **アフィリエイト情報 (Affiliates):** どのアフィリエイトリンクから来たかを記録する場合に必要です。
* **質問と回答 (QandA):** 記事生成のためにユーザーが答えた質問と回答のセット。どの記事に関連しているかを記録します。

#### **ステップ2: 各情報が持つ「属性（データ項目）」を決める**

次に、それぞれの「情報の種類」が具体的にどんなデータを持つかを決めます。これがデータベースの「カラム」になります。

* **ユーザー (Users) テーブル**
    * `userId` (主キー、自動生成のID)
    * `email` (メールアドレス)
    * `passwordHash` (暗号化されたパスワード)
    * `subscriptionPlan` ('free', 'paid' など)
    * `createdAt` (登録日時)
* **記事 (Articles) テーブル**
    * `articleId` (主キー)
    * `userId` (どのユーザーが作ったかのID、Usersテーブルと繋がる)
    * `title` (タイトル)
    * `content` (AIが生成した本文)
    * `status` ('draft', 'published' など)
    * `createdAt` (作成日時)
* **ジャンル (Genres) テーブル**
    * `genreId` (主キー)
    * `name` ('technology', 'health' など)

#### **ステップ3: 情報同士の「関係性」を定義する (ER図)**

洗い出した情報同士がどう繋がるかを決め、**ER図 (Entity-Relationship Diagram)** という図で表現します。

* 一人の**ユーザー**は、**複数**の**記事**を作成できる。(1対多)
* 一つの**記事**は、**複数**の**ジャンル**に属することができる。(多対多)
    * ※この場合、「中間テーブル」という`ArticleGenres`のようなテーブルを作って管理するのが一般的です。
* 一つの**記事**は、一つの**ユーザー**によって作成される。(多対1)

これらのステップをExcelや専用ツール（例: `draw.io`, `Lucidchart`）でまとめたものが**DB設計書**になります。

---

### **API連携設計書の作成 🤝**

これは、**フロントエンド（ユーザーが触る画面）とバックエンド（サーバー）が、どのようなルールで情報をやり取りするか**を決める設計です。

#### **ステップ1: 必要な「機能（APIエンドポイント）」を洗い出す**

ユーザーの操作やシステムの動作ごとに、どのようなAPIが必要になるかをリストアップします。一般的に**REST API**の考え方で設計します。

* **認証関連**
    * `POST /api/auth/register`: ユーザー登録
    * `POST /api/auth/login`: ログイン
    * `POST /api/auth/logout`: ログアウト
* **記事関連**
    * `POST /api/articles`: AIに記事生成をリクエストする
    * `GET /api/articles`: 自分が作成した記事の一覧を取得する
    * `GET /api/articles/{id}`: 特定の記事の詳細を取得する
    * `PUT /api/articles/{id}`: 記事を更新する
    * `POST /api/articles/{id}/publish`: 外部システムに記事を連携（公開）する
* **ユーザー情報関連**
    * `GET /api/me`: ログイン中の自分の情報を取得する
    * `PUT /api/me`: 自分の情報（プランなど）を更新する

#### **ステップ2: 各APIの「仕様」を具体的に決める**

各APIについて、より詳細なルールを決めていきます。

* **リクエスト (Request):** フロントエンドがサーバーに送る情報
    * **HTTPメソッド:** `GET`, `POST`, `PUT`, `DELETE` のどれを使うか。
    * **ヘッダー (Header):** 認証トークンなどをどうやって送るか。（例: `Authorization: Bearer <token>`）
    * **ボディ (Body):** どんなデータをJSON形式で送るか。（例: 記事生成なら `{ "title": "新しい記事", "answers": [...] }`）
* **レスポンス (Response):** サーバーがフロントエンドに返す情報
    * **ステータスコード:** 成功なら `200 OK` や `201 Created`、失敗なら `400 Bad Request` や `401 Unauthorized` など。
    * **ボディ (Body):** どんなデータをJSON形式で返すか。（例: 記事一覧なら `[{ "id": "...", "title": "..." }, ...]`）

#### **ステップ3: 外部APIとの連携仕様を決める**

「連携する別のシステムに記事を載せる」機能では、その外部システムのAPI仕様を調べる必要があります。

* **認証方法:** APIキーが必要か、OAuth認証か。
* **エンドポイントURL:** どのURLにリクエストを送るのか。
* **データ形式:** どんな形式で記事データを送る必要があるか。

これらの情報をSwagger (OpenAPI) やMarkdownなどで文書化すれば、**API連携設計書**の完成です。これにより、フロントエンド開発者とバックエンド開発者がスムーズに連携できます。